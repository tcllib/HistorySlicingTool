import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;

import org.eclipse.jgit.api.BlameCommand;
import org.eclipse.jgit.api.Git;
import org.eclipse.jgit.api.errors.GitAPIException;
import org.eclipse.jgit.blame.BlameResult;
import org.eclipse.jgit.errors.AmbiguousObjectException;
import org.eclipse.jgit.errors.IncorrectObjectTypeException;
import org.eclipse.jgit.errors.MissingObjectException;
import org.eclipse.jgit.errors.RevisionSyntaxException;
import org.eclipse.jgit.internal.storage.file.FileRepository;
import org.eclipse.jgit.lib.Constants;
import org.eclipse.jgit.lib.ObjectId;
import org.eclipse.jgit.lib.ObjectReader;
import org.eclipse.jgit.lib.Repository;
import org.eclipse.jgit.revwalk.RevCommit;
import org.eclipse.jgit.revwalk.RevTree;
import org.eclipse.jgit.revwalk.RevWalk;
import org.eclipse.jgit.treewalk.CanonicalTreeParser;
import org.eclipse.jgit.treewalk.TreeWalk;
import org.eclipse.jgit.diff.DiffEntry;
import org.eclipse.jgit.diff.Edit;
import org.eclipse.jgit.diff.EditList;
import org.eclipse.jgit.diff.HistogramDiff;
import org.eclipse.jgit.diff.MyersDiff;
import org.eclipse.jgit.diff.RawText;
import org.eclipse.jgit.diff.RawTextComparator;

import java.io.ByteArrayOutputStream;

import org.eclipse.jgit.diff.DiffFormatter;


//this class mainly demonstrate how does API work
public class LineHistory {
	
	private static Git myGit;
	//private static ArrayList<ObjectId> output;
	
	//this hash table is used to store the final results
	private static Hashtable<Integer, List<String>> resultTable;
	
	//this list is used to store the list of the changed commit ID for each line
	//private static List<List<String>> resultLists;
	
	//How many lines does the target file contain
	private static int size;
	
	//exception need to be catched later first 3 belongs to repo.resolve and GitAPIException belongs to List<DiffEntry> diffs
	public static void main(String[] args) throws RevisionSyntaxException, AmbiguousObjectException, IncorrectObjectTypeException, IOException, GitAPIException {
		// TODO Auto-generated method stub
		
		//Initializing Git working directory
		File gitWorkDir = new File(args[0]);
		
		//Initializing input file path
		String filePath = args[1];
		
		try
	    {
			myGit = Git.open(gitWorkDir);
	    }
	    catch (IOException e)
	    {
	    	System.out.println("Invalid directory");
	    	System.exit(0);
	    }
		
		//Initializing the Repository object
		Repository localRepo = myGit.getRepository();
		
		//try to get the current commit Id and its previous one
		ObjectId newId = localRepo.resolve(Constants.HEAD);
		ObjectId oldId = localRepo.resolve(newId.name() + "^");
		oldId = localRepo.resolve(oldId.name() + "^");
		System.out.println("old Id is " + oldId);
		
		//try to get the current file and its previous version
		RawText newFile = getFile(localRepo, filePath, newId);
		RawText oldFile = getFile(localRepo, filePath, oldId);
		
		
		//Initializing the output table
		InitOutput(localRepo, filePath);
		
		process(localRepo, filePath);
		
		
		printOutput();
	    
	}
	
	private static void InitOutput(Repository localRepo, String filePath) throws RevisionSyntaxException, AmbiguousObjectException, IncorrectObjectTypeException, IOException {
		//initializing the current revision
		ObjectId Id = localRepo.resolve(Constants.HEAD);
		RawText targetFile = getFile(localRepo, filePath, Id);
		
		size = targetFile.size();
		
		resultTable = new Hashtable<Integer, List<String>> (size);
		//resultLists = new ArrayList<List<String>> (size);

		//add current commit Id to the result
		List<String> initList = new ArrayList<String> ();
		//initList.add(Id.name());
		
		//Initialize result table with line numbers and empty arrayLists
		for (int i = 1; i <= size; i++) {
			resultTable.put(i, initList);
			//resultLists.add(new ArrayList<String> ());
		}
	}
	
	private static void process(Repository localRepo, String filePath) throws RevisionSyntaxException, AmbiguousObjectException, IncorrectObjectTypeException, IOException {
		
		//initializing the current revision
		ObjectId newId = localRepo.resolve(Constants.HEAD);
		
		//boolean value used to decide if there exists a previous revision, if not end the loop
		boolean isEnd = false;
		
		RawText headFile = getFile(localRepo, filePath, newId);
		int headSize = headFile.size();
		
		//Initialize mapping list
		List<LinePair<Integer, Integer>> lineMappingList = new ArrayList<LinePair<Integer, Integer>>();
		for (int i = 0; i < headSize; i ++) {
			 lineMappingList.add(new LinePair<Integer, Integer>(i + 1, i + 1));
		}
		
		//count to determine the times of loop runs. count = 1 indicates that the file is a newly added file 
		//which does not have a history
		int count = 0;
		do {
				
			ObjectId oldId = localRepo.resolve(newId.name() + "^");
				
			System.out.println("newId is " + newId.name());
			//System.out.println("oldId is " + oldId.name());
			
			
			//get target line numbers
			
			//if there is no previous revision, end the loop
			if (oldId == null) {
				break;
			}
			
			// try to get the new and old file
			System.out.println("this is new file: ");
			RawText newFile = getFile(localRepo, filePath, newId);
			System.out.println("-----------");
			System.out.println("this is old file: ");
			RawText oldFile = getFile(localRepo, filePath, oldId);
		
			
			//check if previous revision exist for oldFile
			if(oldFile == null) {
				break;
			}
			//get matched lines
			ArrayList<LinePair<Integer, Integer>> newLineMappingList = lineMatch(newFile, oldFile, count, oldId, lineMappingList);
			
			//update the mapping list
			for (int i = 0; i < lineMappingList.size(); i++) {
				LinePair<Integer, Integer> oldPair = lineMappingList.get(i);
				int targetLine = oldPair.getL();
				boolean isValid = false;
				
				//Search if the target Line exists in the new list
				//May change to hashtable later for efficient search if possible
				for (LinePair<Integer, Integer> newPair: newLineMappingList) {
					//If find a match modify it and stop the loop
					if(newPair.getR() == targetLine) {
						oldPair.setL(newPair.getL());
						isValid = true;
						break;
					}
				}
				
				//If there is no match remove it
				if(!isValid) {
					System.out.println("------------removed-----------");
					lineMappingList.remove(oldPair);
				}
			}
			
			//move to the previous revision
			newId = oldId;
			
			//increment count
			count ++;
			for(LinePair<Integer, Integer> a: lineMappingList) {
				System.out.println(a.getL() + ", " + a.getR());
			}
			System.out.println("-----------");
			
		} while(!isEnd);
		
		//this line will not be executed!!! fix this later!!!!
		if (count == 1) {
			System.out.println("This is a newly added file");
			
		}
		
		//System.out.println("count is " + count);
		
	}
	
	//this method try to find a file in the repo for a given commit
	private static RawText getFile(Repository localRepo, String filePath, ObjectId commitId) throws MissingObjectException, IncorrectObjectTypeException, IOException, NullPointerException {
		RawText file = null;
		ObjectReader reader = localRepo.newObjectReader();
		
		try {
	  		// Get the commit object for that revision
	  	    RevWalk walk = new RevWalk(reader);
	  	    RevCommit commit = walk.parseCommit(commitId);

	  	        // Get the revision's file tree
	  	    RevTree tree = commit.getTree();
	  	        // .. and narrow it down to the single file's path
	  	    TreeWalk treewalk = TreeWalk.forPath(reader, filePath, tree);

	  	    if (treewalk != null) {
	  	    	// use the blob id to read the file's data
	  	        byte[] data = reader.open(treewalk.getObjectId(0)).getBytes();
	  	        //return new String(data, "utf-8");
	  	        file = new RawText(data);
	  	        System.out.println(new String(data, "utf-8"));
	  	        
	  	        //newText = new RawText(data);
	  	    } else {
	  	            System.out.println("File Not Found");
	  	    }
	  	} 
	  	//catch ()
	  	finally {
	  		reader.release();
	  	}
		
		return file;
		
	}

	private static ArrayList<LinePair<Integer, Integer>> lineMatch(RawText newFile, RawText oldFile , int count, ObjectId commitId, List<LinePair<Integer, Integer>> lineMappingList) throws IOException {
		List<Integer> changedLines = new ArrayList<Integer> ();
		ByteArrayOutputStream out = new ByteArrayOutputStream();
	    
	    //System.out.println("ALL DIFF OUTPUT " + count);
	    //System.out.println("-----------");
	    
	   
	   	int newFileLineNumber = newFile.size();
	   	int oldFileLineNumber = oldFile.size();
	   	//Find which file has the maximum line number for the following loop
	   	//System.out.println("New Line Numbers: "+newFileLineNumber);
	   	//System.out.println("Old Line Numbers: "+oldFileLineNumber);
	    ArrayList<LinePair<Integer,Integer>> matcher = new ArrayList<LinePair<Integer,Integer>>();
	    ArrayList<LinePair<Integer,Integer>> changedMatcher = new ArrayList<LinePair<Integer,Integer>>();
	    
	    //initial the array list with paired numbers/ check array list elements
	    
	    //System.out.println(matcher.get(maxLineN-1).getL());
	    
	    
	    
	    int beginA[] = new int[200],beginB[] = new int[200];
	    int endA[] = new int[200],endB[] = new int[200];
	    
	    try {    	
	    	 int i = 0;
		     EditList diffList = new EditList();
		     diffList.addAll(MyersDiff.INSTANCE.diff(RawTextComparator.DEFAULT,oldFile,newFile));
		     new DiffFormatter(out).format(diffList, oldFile, newFile);
			 for (Edit edit : diffList) {
				 beginA[i] = edit.getBeginA(); 
				 endA[i] = edit.getEndA();
				 beginB[i] = edit.getBeginB();
				 endB[i] = edit.getEndB();
				 //System.out.println("BeginA: "+beginA[i]+" EndA: "+endA[i]+" BeginB: "+beginB[i]+" EndB: "+endB[i]);
				 i++;			  
		 }
			 
			 //System.out.println(lineA.toString()+lineB.toString()+lenA.toString()+lenB.toString());
			 ArrayList<Integer> oldList = new ArrayList<Integer> ();
			 ArrayList<Integer> newList = new ArrayList<Integer> ();
			 List<List<LinePair<Integer, String>>> oldOnlyLists = new ArrayList<List<LinePair<Integer, String>>> ();
			 List<List<LinePair<Integer, String>>> newOnlyLists = new ArrayList<List<LinePair<Integer, String>>> ();
			 
			 
			 for(int Left = 1; Left <= oldFileLineNumber; Left++ ){
				 oldList.add(Left);
			 }		 
			 
			 for(int Right = 1; Right <= newFileLineNumber; Right++ ){
				 newList.add(Right);
			 }	
			 
			 for (int j = 0; j< i ; j++){
				 List<LinePair<Integer, String>> changedTempListL = new ArrayList<LinePair<Integer, String>>();
				 List<LinePair<Integer, String>> changedTempListR = new ArrayList<LinePair<Integer, String>>();
				 List<Integer> unchangedTempListL = new ArrayList<Integer>();
				 List<Integer> unchangedTempListR = new ArrayList<Integer>();

				 for (int Left = beginA[j]+1; Left<=endA[j]; Left++){
					 //System.out.println("im in-------------------------");
					 changedTempListL.add(new LinePair<Integer, String> (Left, oldFile.getString(Left - 1)));
					 unchangedTempListL.add(Left);
				 }
				 
				 for (int Right = beginB[j]+1; Right<=endB[j]; Right++){
					 changedTempListR.add(new LinePair<Integer, String> (Right, newFile.getString(Right - 1)));
					 unchangedTempListR.add(Right);
					 changedLines.add(Right);
				 }
				 
				 newList.removeAll(unchangedTempListR);
			 	 oldList.removeAll(unchangedTempListL);
			 	 //System.out.println("newList is ");
			 	 //System.out.println(newList);
			 	 //System.out.println("oldList is ");
			 	 //System.out.println(oldList);
			 	 
				 //check that if the hunk is a large modification
				 if(!isLargeModification(changedTempListL.size(), oldFileLineNumber, changedTempListR.size(), newFileLineNumber)) {
					 oldOnlyLists.add(changedTempListL);
				 	 newOnlyLists.add(changedTempListR);	 
				 }
				 
				 //System.out.println("changedTempL is ");
				 //for(LinePair<Integer, String> pair : changedTempListL) {
				//	 System.out.println(pair.getL() + ", " + pair.getR());
				 //}
			 }		 	 
			 

			 //System.out.println("newOnly list is ");
			 //printLists(newOnlyLists);
			 //System.out.println("oldOnly list is ");
			 //printLists(oldOnlyLists);

			 //line mapping for unchanged lines
			 matcher = lineMappingForUnchangedLines(oldList, newList);
			 //System.out.println("unchanged matcher is ");
			 //printMatcher(matcher);
			 			 
			 //line mapping for changed lines in hunks
			 changedMatcher = lineMappingForChangedLines(oldOnlyLists, newOnlyLists);
			 System.out.println("changed matcher is ");
			 
			 for (LinePair<Integer,Integer> pair : changedMatcher) {
					System.out.println(pair.getL() + ", " + pair.getR());
				}
			 System.out.println("--------------");
			 //printMatcher(changedMatcher);
			 //System.out.println("size is changedMatcher is" + changedMatcher.size());
			 
			 //Combine the two matcher
			 matcher.addAll(changedMatcher);
			 
			 //remove unneeded lines
			 
			 
		     } catch (IOException e) {
		    	 e.printStackTrace();
		     }
	    	
		     out.reset();	
		//System.out.println("size of changedLines is " + changedLines.size());

	    //update the resultLists
System.out.println("changed matcher before is ");
			 
			 for (LinePair<Integer,Integer> pair : changedMatcher) {
					System.out.println(pair.getL() + ", " + pair.getR());
				}
			 System.out.println("--------------");
	    updateResultTable(changedMatcher, commitId, lineMappingList);
	    
	    return matcher;
	}
	
	private static ArrayList<LinePair<Integer,Integer>> lineMappingForUnchangedLines(ArrayList<Integer> oldList, ArrayList<Integer> newList) {
		ArrayList<LinePair<Integer,Integer>> matcher = new ArrayList<LinePair<Integer,Integer>>();

		int Left,Right;
		 for(int index = 0; index < oldList.size() ; index++){
			 Left = (int) oldList.toArray()[index];
			 Right = (int) newList.toArray()[index];
			 //System.out.println(Left+","+Right);
		     LinePair<Integer,Integer> lp = new LinePair<Integer,Integer>(Left,Right);
		     matcher.add(lp);
		 }
		
		return matcher;
	}
	
	private static ArrayList<LinePair<Integer,Integer>> lineMappingForChangedLines(List<List<LinePair<Integer, String>>> oldOnlyLists, List<List<LinePair<Integer, String>>> newOnlyLists) {
		ArrayList<LinePair<Integer,Integer>> matcher = new ArrayList<LinePair<Integer,Integer>>();
		
		
		//System.out.println("oldOnlyList size is " + oldOnlyLists.size());
		//System.out.println("newOnlyList size is " + newOnlyLists.size());
		//loop for traversing hunks
		for(int i = 0; i < oldOnlyLists.size(); i++) {
			List<LinePair<Integer, String>> newList = newOnlyLists.get(i);
			List<LinePair<Integer, String>> oldList = oldOnlyLists.get(i);
			
			//loop for traversing each line in new hunk
			for (int j = 0; j < newList.size(); j++) {
				LinePair<Integer, String> newLine = newList.get(j);
				String newString = newLine.getR();
				
				//calculate the Leven distance for each line in old hunk
				for (int n = 0; n < oldList.size(); n++) {
					//need to compute minimum!!!
					LinePair<Integer,String> oldLine = oldList.get(n);
					String oldString = oldLine.getR();
					double distance = calculateNormalizedDistance(oldString, newString);
					System.out.println("distance is " + distance);
					
					if(distance < 0.4) {
						LinePair<Integer, Integer> matchedLine = new LinePair<Integer, Integer> (oldLine.getL(), newLine.getL());
						matcher.add(matchedLine);
					}
				}
			}
			
		}
		
		return matcher;
	}
	
	private static boolean isLargeModification(int lengthL, int file_lengthL, int lengthR, int file_lengthR) {
		boolean isLargeModification = false;
		
		return isLargeModification;
	}
	
	private static double calculateNormalizedDistance (String s1, String s2) {
		int max = Math.min(s1.length(), s2.length());
		return (double) getDistance(s1, s2)/max;
	}
	
	private static int getDistance(String s1, String s2) {
   
        // check preconditions
        int m = s1.length();
        int n = s2.length();
        if (m == 0) {
            //return n; // some simple heuristics
        } else if (n == 0) {
            //return m; // some simple heuristics
        } else if (m > n) {
            String tempString = s1; // swap m with n to get O(min(m, n)) space
            s1 = s2;
            s2 = tempString;
            int tempInt = m;
            m = n;
            n = tempInt;
        }
        
        // normalize case
        s1 = s1.toUpperCase();
        s2 = s2.toUpperCase();

        
        // Instead of a 2d array of space O(m*n) such as int d[][] = new int[m +
        // 1][n + 1], only the previous row and current row need to be stored at
        // any one time in prevD[] and currD[]. This reduces the space
        // complexity to O(min(m, n)).
        int prevD[] = new int[n + 1];
        int currD[] = new int[n + 1];
        int temp[]; // temporary pointer for swapping

        
        // the distance of any second string to an empty first string
        for (int j = 0; j < n + 1; j++) {
            prevD[j] = j;
        }

        
        // for each row in the distance matrix
        for (int i = 0; i < m; i++) {

            
            // the distance of any first string to an empty second string
            currD[0] = i + 1;
            char ch1 = s1.charAt(i);

            
            // for each column in the distance matrix
            for (int j = 1; j <= n; j++) {

                
                char ch2 = s2.charAt(j - 1);
                if (ch1 == ch2) {
                    currD[j] = prevD[j - 1];
                } else {
                    currD[j] = minOfThreeNumbers(prevD[j] + 1,
                                                 currD[j - 1] + 1, prevD[j - 1] + 1);
                }

                
            }

            
            temp = prevD;
            prevD = currD;
            currD = temp;

            
        }

        
        // after swapping, the final answer is now in the last column of prevD

        return prevD[prevD.length - 1];
	}
	
	private static int minOfThreeNumbers(int num1, int num2, int num3) {
	        return Math.min(num1, Math.min(num2, num3));
	}
	
	private static void updateResultTable(ArrayList<LinePair<Integer, Integer>> changedMatcher, ObjectId commitId, List<LinePair<Integer, Integer>> lineMappingList) {
		System.out.println("update changedMatcher is " );
		for (LinePair<Integer, Integer> pair : changedMatcher) {
			System.out.println(pair.getL() + ", " + pair.getR());
		}
		
		for (LinePair<Integer, Integer> pair : changedMatcher) {
			int changedLine = pair.getR();
			
			for (LinePair<Integer, Integer> validPair : lineMappingList) {
				//if exist update and end
				int targetLine = validPair.getL();
				if(changedLine == targetLine) {
					System.out.println("updated line number is: " + validPair.getR());
					List<String> oldString = resultTable.get(validPair.getR());
					oldString.add(commitId.name());
					resultTable.put(validPair.getR(), oldString);
					
					break;
				}
			}
		}
		
		
	}
	
	private static void printOutput() {
		System.out.println("------------------------");
		System.out.println("Final output is: ");
		for (int i = 1; i <= size; i++) {
			List<String> tempList = resultTable.get(i);
			int l = tempList.size();
			String commitList = "";
			
			for (int j = 0; j < l; j++) {
				commitList = commitList + " " + tempList.get(j);
			}
			
			System.out.println("Line " + i + ": " + commitList);
		}
	}
	
	//Used for test purpose only, maybe deleted later
	private static void printMatcher(List<LinePair<Integer,Integer>> matcher) {
		for (LinePair<Integer,Integer> pair : matcher) {
			System.out.println(pair.getL() + ", " + pair.getR());
		}
		System.out.println("--------------");
	}
	
	//Used for test purpose only, maybe deleted later
	private static void printLists(List<List<LinePair<Integer, String>>> lists) {
		for (List<LinePair<Integer, String>> list : lists) {
			for (LinePair<Integer, String> l: list) {
				System.out.println(l.getL());
			}
		}
	}

}
  /**
		  
**/

